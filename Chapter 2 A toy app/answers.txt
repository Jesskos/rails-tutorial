Section 2.2.1
1. (For readers who know CSS) Create a new user, then use your browser’s HTML inspector to determine the CSS id for the text “User was successfully created.” What happens when you refresh your browser?

- it has the id "notice"
- although notice still exists in the html, it is no longer on the page

2. What happens if you try to create a user with a name but no email address?
It still creates a user, but email is left blank

3. What happens if you try create a user with an invalid email address, like “@example.com”?
- email still creates 

4. Destroy each of the users created in the previous exercises. Does Rails display a message by default when a user is destroyed?
yes

Section 2.2.2
1. By referring to Figure 2.11, write out the analogous steps for visiting the URL /users/1/edit.

1. Browser issues a request for the users/1/edit URL (same)
2. Rails routes /users/1/edit in the edit action in Users Controller (same)
3. The edit action asks the User model to retrieve user 1's information
4. The User model pulls user 1's information from the database
5. The User model returns user 1 to the controller
6. The controller captures the users information, which is passed back to edit
7. view sends its HTML to controller
8. Controller then sends HTML info from view to browser

2. Find the line in the scaffolding code that retrieves the user from the database in the previous exercise.

~controller.users_controller.rb
class UsersController < ApplicationController
  # GET /users/1/edit
  def edit
  end

3. What is the name of the view file for the user edit page?
edit.html.erb

Section 2.3.1
1. (For readers who know CSS) Create a new micropost, then use your browser’s HTML inspector to determine the CSS id for the text “Micropost was successfully created.” What happens when you refresh your browser?
- the CSS id is also "notice"; the message flashes and disappears when page is refreshed. 

2. Try to create a micropost with empty content and no user id.
- micro post successfully creates

3. Try to create a micropost with over 140 characters of content (say, the first paragraph from the Wikipedia article on Ruby).
It still creates 

Destroy the microposts from the previous exercises.

Section 2.3.2
Try to create a micropost with the same long content used in a previous exercise (Section 2.3.1.1). How has the behavior changed?
- received error message "Content is too long (maximum is 140 characters)"

(For readers who know CSS) Use your browser’s HTML inspector to determine the CSS id of the error message produced by the previous exercise.
The id is error explanation 

Section 2.3.3
1. Edit the user show page to display the content of the user’s first micropost. (Use your technical sophistication (Box 1.1) to guess the syntax based on the other content in the file.) Confirm by visiting /users/1 that it worked.
<%= @user.microposts.first.content %> in view/show.html.erb

2. The code in Listing 2.16 shows how to add a validation for the presence of micropost content in order to ensure that microposts can’t be blank. Verify that you get the behavior shown in Figure 2.16.
- added presence: true to app/models/micropost.rb

3.Update Listing 2.17 by replacing FILL_IN with the appropriate code to validate the presence of name and email attributes in the User model (Figure 2.17).
validates :name, presence: true
validates :email, presence: true